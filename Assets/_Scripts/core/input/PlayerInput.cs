//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace roguelike.system.input
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""CharacterControls"",
            ""id"": ""43a970a2-a87c-4b1c-a0c4-f455f097373d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""c3c9cba0-e18a-4747-b5a7-999acb2a838b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""03309bdf-0f14-4e01-9acf-4f3d922de621"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4a7976bb-195f-4850-8cc0-bb294176d154"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""75d5cb38-b3f0-4ce1-a55b-e434278405a8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""578e0fd8-34dd-4d10-8366-62d7b9857df7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""829b8742-77b0-4591-bc58-ea4b6cf66021"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a5534b90-cf72-4df8-9a3d-525dc253eac1"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f32a4dde-3bc7-4120-835d-61ee82ab4360"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UIControls"",
            ""id"": ""3ebc930e-b6c1-431f-9c0a-222c7af43e58"",
            ""actions"": [
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""b0f1a61c-8c95-4339-8a13-a143ab366cc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""43bb9701-33cf-450b-97c4-a606c45cb7b4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bb1047e1-3a90-4d46-a51d-18a2192baadb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4f3a48f-a06f-4fed-8472-8f929e8c9ab2"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""EnviromentControls"",
            ""id"": ""a9a72a03-97cc-4838-a640-67766f99537d"",
            ""actions"": [
                {
                    ""name"": ""PrimaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""b14b4d30-d240-458e-94ac-ca29a15cf287"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryAction"",
                    ""type"": ""Button"",
                    ""id"": ""46edc469-cc80-43d7-a6ba-ba9b9f5ed2e9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractionAction"",
                    ""type"": ""Button"",
                    ""id"": ""3dc7feb9-829c-48e7-9be2-a1b0f2d4515d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseMove"",
                    ""type"": ""Value"",
                    ""id"": ""fde467c2-8816-4622-83ba-4f013ec23f84"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9fd3a07c-cff5-4319-a4b7-8f24f056272d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""PrimaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d0b8edd-64da-46b7-9b8a-3edc85037ff6"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""SecondaryAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0a4d3b9c-b261-4b74-80e4-398553998f96"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""MouseMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d7f0f8c-a262-4025-93e2-ba032ea8e075"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PC"",
                    ""action"": ""InteractionAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // CharacterControls
            m_CharacterControls = asset.FindActionMap("CharacterControls", throwIfNotFound: true);
            m_CharacterControls_Movement = m_CharacterControls.FindAction("Movement", throwIfNotFound: true);
            m_CharacterControls_Sprint = m_CharacterControls.FindAction("Sprint", throwIfNotFound: true);
            // UIControls
            m_UIControls = asset.FindActionMap("UIControls", throwIfNotFound: true);
            m_UIControls_Pause = m_UIControls.FindAction("Pause", throwIfNotFound: true);
            m_UIControls_Inventory = m_UIControls.FindAction("Inventory", throwIfNotFound: true);
            // EnviromentControls
            m_EnviromentControls = asset.FindActionMap("EnviromentControls", throwIfNotFound: true);
            m_EnviromentControls_PrimaryAction = m_EnviromentControls.FindAction("PrimaryAction", throwIfNotFound: true);
            m_EnviromentControls_SecondaryAction = m_EnviromentControls.FindAction("SecondaryAction", throwIfNotFound: true);
            m_EnviromentControls_InteractionAction = m_EnviromentControls.FindAction("InteractionAction", throwIfNotFound: true);
            m_EnviromentControls_MouseMove = m_EnviromentControls.FindAction("MouseMove", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // CharacterControls
        private readonly InputActionMap m_CharacterControls;
        private List<ICharacterControlsActions> m_CharacterControlsActionsCallbackInterfaces = new List<ICharacterControlsActions>();
        private readonly InputAction m_CharacterControls_Movement;
        private readonly InputAction m_CharacterControls_Sprint;
        public struct CharacterControlsActions
        {
            private @PlayerInput m_Wrapper;
            public CharacterControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_CharacterControls_Movement;
            public InputAction @Sprint => m_Wrapper.m_CharacterControls_Sprint;
            public InputActionMap Get() { return m_Wrapper.m_CharacterControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterControlsActions set) { return set.Get(); }
            public void AddCallbacks(ICharacterControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
            }

            private void UnregisterCallbacks(ICharacterControlsActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
            }

            public void RemoveCallbacks(ICharacterControlsActions instance)
            {
                if (m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ICharacterControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_CharacterControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_CharacterControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public CharacterControlsActions @CharacterControls => new CharacterControlsActions(this);

        // UIControls
        private readonly InputActionMap m_UIControls;
        private List<IUIControlsActions> m_UIControlsActionsCallbackInterfaces = new List<IUIControlsActions>();
        private readonly InputAction m_UIControls_Pause;
        private readonly InputAction m_UIControls_Inventory;
        public struct UIControlsActions
        {
            private @PlayerInput m_Wrapper;
            public UIControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Pause => m_Wrapper.m_UIControls_Pause;
            public InputAction @Inventory => m_Wrapper.m_UIControls_Inventory;
            public InputActionMap Get() { return m_Wrapper.m_UIControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIControlsActions set) { return set.Get(); }
            public void AddCallbacks(IUIControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_UIControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIControlsActionsCallbackInterfaces.Add(instance);
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
            }

            private void UnregisterCallbacks(IUIControlsActions instance)
            {
                @Pause.started -= instance.OnPause;
                @Pause.performed -= instance.OnPause;
                @Pause.canceled -= instance.OnPause;
                @Inventory.started -= instance.OnInventory;
                @Inventory.performed -= instance.OnInventory;
                @Inventory.canceled -= instance.OnInventory;
            }

            public void RemoveCallbacks(IUIControlsActions instance)
            {
                if (m_Wrapper.m_UIControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_UIControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIControlsActions @UIControls => new UIControlsActions(this);

        // EnviromentControls
        private readonly InputActionMap m_EnviromentControls;
        private List<IEnviromentControlsActions> m_EnviromentControlsActionsCallbackInterfaces = new List<IEnviromentControlsActions>();
        private readonly InputAction m_EnviromentControls_PrimaryAction;
        private readonly InputAction m_EnviromentControls_SecondaryAction;
        private readonly InputAction m_EnviromentControls_InteractionAction;
        private readonly InputAction m_EnviromentControls_MouseMove;
        public struct EnviromentControlsActions
        {
            private @PlayerInput m_Wrapper;
            public EnviromentControlsActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryAction => m_Wrapper.m_EnviromentControls_PrimaryAction;
            public InputAction @SecondaryAction => m_Wrapper.m_EnviromentControls_SecondaryAction;
            public InputAction @InteractionAction => m_Wrapper.m_EnviromentControls_InteractionAction;
            public InputAction @MouseMove => m_Wrapper.m_EnviromentControls_MouseMove;
            public InputActionMap Get() { return m_Wrapper.m_EnviromentControls; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(EnviromentControlsActions set) { return set.Get(); }
            public void AddCallbacks(IEnviromentControlsActions instance)
            {
                if (instance == null || m_Wrapper.m_EnviromentControlsActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_EnviromentControlsActionsCallbackInterfaces.Add(instance);
                @PrimaryAction.started += instance.OnPrimaryAction;
                @PrimaryAction.performed += instance.OnPrimaryAction;
                @PrimaryAction.canceled += instance.OnPrimaryAction;
                @SecondaryAction.started += instance.OnSecondaryAction;
                @SecondaryAction.performed += instance.OnSecondaryAction;
                @SecondaryAction.canceled += instance.OnSecondaryAction;
                @InteractionAction.started += instance.OnInteractionAction;
                @InteractionAction.performed += instance.OnInteractionAction;
                @InteractionAction.canceled += instance.OnInteractionAction;
                @MouseMove.started += instance.OnMouseMove;
                @MouseMove.performed += instance.OnMouseMove;
                @MouseMove.canceled += instance.OnMouseMove;
            }

            private void UnregisterCallbacks(IEnviromentControlsActions instance)
            {
                @PrimaryAction.started -= instance.OnPrimaryAction;
                @PrimaryAction.performed -= instance.OnPrimaryAction;
                @PrimaryAction.canceled -= instance.OnPrimaryAction;
                @SecondaryAction.started -= instance.OnSecondaryAction;
                @SecondaryAction.performed -= instance.OnSecondaryAction;
                @SecondaryAction.canceled -= instance.OnSecondaryAction;
                @InteractionAction.started -= instance.OnInteractionAction;
                @InteractionAction.performed -= instance.OnInteractionAction;
                @InteractionAction.canceled -= instance.OnInteractionAction;
                @MouseMove.started -= instance.OnMouseMove;
                @MouseMove.performed -= instance.OnMouseMove;
                @MouseMove.canceled -= instance.OnMouseMove;
            }

            public void RemoveCallbacks(IEnviromentControlsActions instance)
            {
                if (m_Wrapper.m_EnviromentControlsActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IEnviromentControlsActions instance)
            {
                foreach (var item in m_Wrapper.m_EnviromentControlsActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_EnviromentControlsActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public EnviromentControlsActions @EnviromentControls => new EnviromentControlsActions(this);
        private int m_PCSchemeIndex = -1;
        public InputControlScheme PCScheme
        {
            get
            {
                if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
                return asset.controlSchemes[m_PCSchemeIndex];
            }
        }
        public interface ICharacterControlsActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
        }
        public interface IUIControlsActions
        {
            void OnPause(InputAction.CallbackContext context);
            void OnInventory(InputAction.CallbackContext context);
        }
        public interface IEnviromentControlsActions
        {
            void OnPrimaryAction(InputAction.CallbackContext context);
            void OnSecondaryAction(InputAction.CallbackContext context);
            void OnInteractionAction(InputAction.CallbackContext context);
            void OnMouseMove(InputAction.CallbackContext context);
        }
    }
}
